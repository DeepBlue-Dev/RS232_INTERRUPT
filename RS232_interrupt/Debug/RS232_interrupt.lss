
RS232_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000208  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000869  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ac  00000000  00000000  00000b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000343  00000000  00000000  000012c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001608  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041f  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001afe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_20>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  9c:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <sendChar>:
void update_portc(void){
	PORTC = PINA;
}

void sendChar(unsigned char byte){
	while(!(UCSR0A & (1 << UDRE0)));
  a4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  a8:	95 ff       	sbrs	r25, 5
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <sendChar>
	UDR0 = byte;
  ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  b0:	08 95       	ret

000000b2 <main>:
unsigned char previous_pina_state = 0;

int main(void)
{
	//	all pins on portc as output
	DDRC = 0xFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	87 b9       	out	0x07, r24	; 7
	//	all pins on porta as input
	DDRA = 0x00;
  b6:	11 b8       	out	0x01, r1	; 1
	//	-- USART SETUP --	//
	//	set RX(PD0) as input, TX(PD1) as output and high
	DDRD &= ~(1 << DDRD0);
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	8e 7f       	andi	r24, 0xFE	; 254
  bc:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDRD1);
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD1);
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	8b b9       	out	0x0b, r24	; 11
	//	normal speed
	UCSR0A &= ~(1 << U2X0);
  ca:	e0 ec       	ldi	r30, 0xC0	; 192
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	8d 7f       	andi	r24, 0xFD	; 253
  d2:	80 83       	st	Z, r24
	//	set baud rate to 9600 (23 for the register)
	UBRR0 = 23;
  d4:	87 e1       	ldi	r24, 0x17	; 23
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//	mode select: asynchronous USART
	UCSR0C &= ~((1 << UMSEL00) | (1 << UMSEL01));
  e0:	e2 ec       	ldi	r30, 0xC2	; 194
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	8f 73       	andi	r24, 0x3F	; 63
  e8:	80 83       	st	Z, r24
	//	No parity
	UCSR0C &= ~((1 << UPM00) | (1 << UPM01));
  ea:	80 81       	ld	r24, Z
  ec:	8f 7c       	andi	r24, 0xCF	; 207
  ee:	80 83       	st	Z, r24
	//	1 stop bit
	UCSR0C &= ~(1 << USBS0);
  f0:	80 81       	ld	r24, Z
  f2:	87 7f       	andi	r24, 0xF7	; 247
  f4:	80 83       	st	Z, r24
	//	8 databits
	UCSR0B &= ~(1 << UCSZ02);
  f6:	a1 ec       	ldi	r26, 0xC1	; 193
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	8c 91       	ld	r24, X
  fc:	8b 7f       	andi	r24, 0xFB	; 251
  fe:	8c 93       	st	X, r24
	UCSR0C |=((1 << UCSZ00) | (1 << UCSZ01));
 100:	80 81       	ld	r24, Z
 102:	86 60       	ori	r24, 0x06	; 6
 104:	80 83       	st	Z, r24
	//	we want to trigger an interrupt when the recv buffer is full
	UCSR0B |= (1 << RXCIE0);
 106:	8c 91       	ld	r24, X
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	8c 93       	st	X, r24
	//	enable receive and transmit port
	UCSR0B |= ((1 << RXEN0) | (1 << TXEN0));
 10c:	8c 91       	ld	r24, X
 10e:	88 61       	ori	r24, 0x18	; 24
 110:	8c 93       	st	X, r24
	//	enable GIE
	sei();
 112:	78 94       	sei

   
    while (1) 
    {
		
		if(previous_pina_state != PINA){
 114:	90 b1       	in	r25, 0x00	; 0
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	98 17       	cp	r25, r24
 11c:	d9 f3       	breq	.-10     	; 0x114 <main+0x62>
			PORTC ^= (PINA & 0xFF);//	extract the bits that are 1 and toggle those outputs
 11e:	80 b1       	in	r24, 0x00	; 0
 120:	98 b1       	in	r25, 0x08	; 8
 122:	89 27       	eor	r24, r25
 124:	88 b9       	out	0x08, r24	; 8
			sendChar(PORTC);
 126:	88 b1       	in	r24, 0x08	; 8
 128:	0e 94 52 00 	call	0xa4	; 0xa4 <sendChar>
			while(PINA & 0xFF);	//	wait till we release the buttons, we dont want to send it again
 12c:	80 b1       	in	r24, 0x00	; 0
 12e:	81 11       	cpse	r24, r1
 130:	fd cf       	rjmp	.-6      	; 0x12c <main+0x7a>
			previous_pina_state = PINA;
 132:	80 b1       	in	r24, 0x00	; 0
 134:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	91 e1       	ldi	r25, 0x11	; 17
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x8a>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x90>
 142:	00 00       	nop
 144:	e7 cf       	rjmp	.-50     	; 0x114 <main+0x62>

00000146 <__vector_20>:
void sendChar(unsigned char byte){
	while(!(UCSR0A & (1 << UDRE0)));
	UDR0 = byte;
}

ISR(USART0_RX_vect){
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
	recv_buffer = UDR0;
 158:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 15c:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <recv_buffer>
	PORTC ^= (2 << (recv_buffer)) / 2;
 160:	38 b1       	in	r19, 0x08	; 8
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <__vector_20+0x26>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	2a 95       	dec	r18
 16e:	e2 f7       	brpl	.-8      	; 0x168 <__vector_20+0x22>
 170:	99 23       	and	r25, r25
 172:	0c f4       	brge	.+2      	; 0x176 <__vector_20+0x30>
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	95 95       	asr	r25
 178:	87 95       	ror	r24
 17a:	83 27       	eor	r24, r19
 17c:	88 b9       	out	0x08, r24	; 8
}
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	3f 91       	pop	r19
 184:	2f 91       	pop	r18
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
